#!/usr/bin/env bash

# Exit on error, undefined variables, and propagate errors in pipes
set -euo pipefail

# Source common functions
source "$(dirname "$0")/common"

DOTFILE_PATH="$(pwd)"
HOME_PATH="$HOME"

link_files() {
    local source_dir="$1"
    local target_base="$2"
    local files

    # Find all files in the source directory
    while IFS= read -r -d '' file; do
        local relative_path="${file#$source_dir/}"
        local target="$target_base/$relative_path"
        local target_dir="$(dirname "$target")"

        log_info "Linking $file to $target"
        mkdir -p "$target_dir"
        ln -sf "$DOTFILE_PATH/$file" "$target"
    done < <(find "$source_dir" -type f -print0)
}

task_config() {
    log_info "Linking config files"
    link_files "config" "$HOME_PATH/.config"
}

task_defaults() {
    log_info "Changing macOS settings"
    ./"$(dirname "$0")/defaults"
}

task_home() {
    log_info "Linking home files"
    link_files "home" "$HOME_PATH"
}

task_homebrew() {
    log_info "Installing Homebrew packages"
    brew bundle --file=homebrew/Brewfile --cleanup
}

# List of all available tasks
tasks=(
    "config"
    "defaults"
    "home"
    "homebrew"
)

show_usage() {
    cat << EOF
Usage: $0 [options] [tasks...] [^tasks...]

Options:
    -h, --help     Show this help message
    -l, --list     List available tasks

Arguments:
    taskname       Only run specified tasks
    ^taskname      Exclude specific tasks from execution

Available tasks:
$(printf '%s\n' "${tasks[@]}" | sed 's/^/    /')

Examples:
    $0               # Run all tasks
    $0 home config   # Run only home and config tasks
    $0 ^homebrew     # Run all tasks except homebrew
EOF
}

# Initialize arrays
excluded_tasks=()
included_tasks=()

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_usage
            exit 0
            ;;
        -l|--list)
            printf '%s\n' "${tasks[@]}"
            exit 0
            ;;
        ^*)
            task="${1#^}"
            if [[ ! " ${tasks[@]} " =~ " ${task} " ]]; then
                log_error "Unknown task: $task"
                show_usage
                exit 1
            fi
            excluded_tasks+=("$task")
            ;;
        *)
            if [[ ! " ${tasks[@]} " =~ " $1 " ]]; then
                log_error "Unknown task: $1"
                show_usage
                exit 1
            fi
            included_tasks+=("$1")
            ;;
    esac
    shift
done

# Determine which tasks to run
tasks_to_run=()
if [ ${#included_tasks[@]} -eq 0 ]; then
    # If no tasks specifically included, use all tasks
    tasks_to_run=("${tasks[@]}")
else
    # Otherwise use only included tasks
    tasks_to_run=("${included_tasks[@]}")
fi

# Run tasks
for task in "${tasks_to_run[@]}"; do
    # Skip if task is in excluded_tasks
    if [[ ${#excluded_tasks[@]} -gt 0 ]] && printf '%s\n' "${excluded_tasks[@]}" | grep -q "^${task}$"; then
        log_info "Skipping task: $task"
        continue
    fi

    log_info "Running task: $task"
    "task_$task"
done
