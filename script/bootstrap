#!/usr/bin/env bash

# Exit immediately if a command exits with a non-zero status
set -e

# Source common functions
source "$(dirname "$0")/common"

log_info "Checking if Homebrew is already installed"

if ! command -v brew &> /dev/null; then
    log_info "Installing Homebrew"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    # Add Homebrew to PATH
    eval "$(/opt/homebrew/bin/brew shellenv)"
else
    log_info "Homebrew already installed"
fi

log_info "Symlinking files to ~/"
make home

log_info "Symlinking files to ~/.config/"
make config

log_info "Installing packages using Homebrew"
make homebrew

log_info "Changing shell to fish"
FISH_PATH="$(command -v fish)"

if [[ -z "$FISH_PATH" ]]; then
    log_error "Fish shell not found. Please ensure it's installed via Homebrew first"
    exit 1
fi

if ! grep -q "$FISH_PATH" /etc/shells; then
    log_info "Adding fish to /etc/shells"
    echo "$FISH_PATH" | sudo tee -a /etc/shells
fi

if [[ "$SHELL" != "$FISH_PATH" ]]; then
    log_info "Changing default shell to fish"
    chsh -s "$FISH_PATH"
else
    log_info "Fish is already the default shell"
fi

log_info "Updating Git remote URLs from HTTPS to SSH"
git_remote_url=$(git config --get remote.origin.url)

if [[ "$git_remote_url" =~ ^https://github ]]; then
    ssh_url=$(echo "$git_remote_url" | sed 's|https://github.com/|git@github.com:|')
    git remote set-url origin "$ssh_url"
    log_info "Updated remote URL to SSH format"
else
    log_info "Remote URL already using SSH format"
fi
